#!/usr/bin/env python3
"""
LLMÈõÜÊàêÁöÑÂ∑•ÂÖ∑ÈìæÁÆ°ÁêÜÂô®
Âü∫‰∫étradingagentsÁöÑËÆæËÆ°ÔºåÊîØÊåÅLLM Function Calling
"""

import asyncio
import logging
import json
from typing import Dict, List, Any, Optional, Callable, Union
from dataclasses import dataclass, asdict
from datetime import datetime
from enum import Enum

from .toolkit_manager import ToolkitManager, ToolInfo

logger = logging.getLogger(__name__)

class ToolCategory(Enum):
    """Â∑•ÂÖ∑ÂàÜÁ±ª"""
    DATA = "data"
    ANALYSIS = "analysis"
    NEWS = "news"
    MARKET = "market"
    FUNDAMENTALS = "fundamentals"
    TECHNICAL = "technical"
    SENTIMENT = "sentiment"

@dataclass
class LLMToolSchema:
    """LLMÂ∑•ÂÖ∑Ê®°ÂºèÂÆö‰πâ"""
    type: str = "function"
    function: Dict[str, Any] = None

@dataclass
class FunctionSchema:
    """ÂáΩÊï∞Ê®°ÂºèÂÆö‰πâ"""
    name: str
    description: str
    parameters: Dict[str, Any]

class LLMToolkitManager(ToolkitManager):
    """LLMÈõÜÊàêÁöÑÂ∑•ÂÖ∑ÈìæÁÆ°ÁêÜÂô®"""
    
    def __init__(self):
        super().__init__()
        self.llm_tools: Dict[str, LLMToolSchema] = {}
        self.tool_schemas: Dict[str, FunctionSchema] = {}
    
    async def initialize(self):
        """ÂàùÂßãÂåñÂ∑•ÂÖ∑Èìæ"""
        await super().initialize()
        
        # ÁîüÊàêLLMÂ∑•ÂÖ∑Ê®°Âºè
        await self._generate_llm_schemas()
        
        logger.info(f"‚úÖ LLMÂ∑•ÂÖ∑ÈìæÂàùÂßãÂåñÂÆåÊàêÔºåÂÖ±{len(self.llm_tools)}‰∏™LLMÂ∑•ÂÖ∑")
    
    async def _generate_llm_schemas(self):
        """ÁîüÊàêLLMÂ∑•ÂÖ∑Ê®°Âºè"""
        for tool_name, tool_info in self.tools.items():
            # ÁîüÊàêOpenAI Function CallingÊ†ºÂºèÁöÑÊ®°Âºè
            function_schema = FunctionSchema(
                name=tool_name,
                description=tool_info.description,
                parameters=self._convert_to_json_schema(tool_info.parameters)
            )
            
            llm_tool_schema = LLMToolSchema(
                type="function",
                function=asdict(function_schema)
            )
            
            self.tool_schemas[tool_name] = function_schema
            self.llm_tools[tool_name] = llm_tool_schema
            
            logger.debug(f"üìù ÁîüÊàêLLMÂ∑•ÂÖ∑Ê®°Âºè: {tool_name}")
    
    def _convert_to_json_schema(self, parameters: Dict[str, str]) -> Dict[str, Any]:
        """ËΩ¨Êç¢ÂèÇÊï∞‰∏∫JSON SchemaÊ†ºÂºè"""
        properties = {}
        required = []
        
        for param_name, param_type in parameters.items():
            if param_type == "str":
                properties[param_name] = {"type": "string"}
            elif param_type == "int":
                properties[param_name] = {"type": "integer"}
            elif param_type == "float":
                properties[param_name] = {"type": "number"}
            elif param_type == "bool":
                properties[param_name] = {"type": "boolean"}
            elif param_type == "list":
                properties[param_name] = {"type": "array"}
            elif param_type == "dict":
                properties[param_name] = {"type": "object"}
            else:
                properties[param_name] = {"type": "string"}
            
            required.append(param_name)
        
        return {
            "type": "object",
            "properties": properties,
            "required": required
        }
    
    async def get_llm_tools(self, category: Optional[str] = None) -> List[Dict[str, Any]]:
        """Ëé∑ÂèñLLMÂ∑•ÂÖ∑ÂàóË°®"""
        tools = []
        
        for tool_name, llm_tool in self.llm_tools.items():
            if category:
                tool_info = self.tools.get(tool_name)
                if tool_info and tool_info.category != category:
                    continue
            
            tools.append(asdict(llm_tool))
        
        return tools
    
    async def get_openai_functions(self, category: Optional[str] = None) -> List[Dict[str, Any]]:
        """Ëé∑ÂèñOpenAI Function CallingÊ†ºÂºèÁöÑÂ∑•ÂÖ∑"""
        functions = []
        
        for tool_name, function_schema in self.tool_schemas.items():
            if category:
                tool_info = self.tools.get(tool_name)
                if tool_info and tool_info.category != category:
                    continue
            
            functions.append(asdict(function_schema))
        
        return functions
    
    async def call_llm_tool(self, function_call: Dict[str, Any]) -> Dict[str, Any]:
        """
        Ë∞ÉÁî®LLMÂ∑•ÂÖ∑
        
        Args:
            function_call: LLMËøîÂõûÁöÑÂáΩÊï∞Ë∞ÉÁî®‰ø°ÊÅØ
                {
                    "name": "tool_name",
                    "arguments": "{\"param1\": \"value1\"}"
                }
        """
        try:
            tool_name = function_call.get("name")
            arguments_str = function_call.get("arguments", "{}")
            
            # Ëß£ÊûêÂèÇÊï∞
            try:
                arguments = json.loads(arguments_str)
            except json.JSONDecodeError as e:
                return {
                    "success": False,
                    "error": f"ÂèÇÊï∞Ëß£ÊûêÂ§±Ë¥•: {e}",
                    "tool_name": tool_name
                }
            
            # Ë∞ÉÁî®Â∑•ÂÖ∑
            result = await self.call_tool(tool_name, arguments)
            
            # Ê∑ªÂä†LLMÁâπÂÆöÁöÑ‰ø°ÊÅØ
            result["function_call"] = function_call
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå LLMÂ∑•ÂÖ∑Ë∞ÉÁî®Â§±Ë¥•: {e}")
            return {
                "success": False,
                "error": str(e),
                "function_call": function_call
            }
    
    async def get_unified_tools(self) -> Dict[str, Any]:
        """Ëé∑ÂèñÁªü‰∏ÄÂ∑•ÂÖ∑Êé•Âè£"""
        return {
            "stock_market_data_unified": {
                "name": "get_stock_market_data_unified",
                "description": "Áªü‰∏ÄÁöÑËÇ°Á•®Â∏ÇÂú∫Êï∞ÊçÆÂ∑•ÂÖ∑ÔºåËá™Âä®ËØÜÂà´ËÇ°Á•®Á±ªÂûãÂπ∂Ëé∑Âèñ‰ª∑Ê†ºÂíåÊäÄÊúØÊåáÊ†á",
                "category": "market",
                "parameters": {
                    "ticker": "str",
                    "start_date": "str", 
                    "end_date": "str"
                }
            },
            "stock_fundamentals_unified": {
                "name": "get_stock_fundamentals_unified", 
                "description": "Áªü‰∏ÄÁöÑËÇ°Á•®Âü∫Êú¨Èù¢Êï∞ÊçÆÂ∑•ÂÖ∑ÔºåËé∑ÂèñË¥¢Âä°Êï∞ÊçÆÂíåÂÖ¨Âè∏‰ø°ÊÅØ",
                "category": "fundamentals",
                "parameters": {
                    "ticker": "str",
                    "start_date": "str",
                    "end_date": "str"
                }
            },
            "stock_news_unified": {
                "name": "get_stock_news_unified",
                "description": "Áªü‰∏ÄÁöÑËÇ°Á•®Êñ∞ÈóªÂ∑•ÂÖ∑ÔºåËé∑ÂèñÁõ∏ÂÖ≥Êñ∞ÈóªÂíåÊÉÖÊÑüÂàÜÊûê",
                "category": "news", 
                "parameters": {
                    "ticker": "str",
                    "days": "int"
                }
            }
        }
    
    async def register_unified_tool(self, tool_name: str, description: str, 
                                  category: str, parameters: Dict[str, str], 
                                  function: Callable):
        """Ê≥®ÂÜåÁªü‰∏ÄÂ∑•ÂÖ∑"""
        # Ê≥®ÂÜåÂà∞Âü∫Á°ÄÂ∑•ÂÖ∑Èìæ
        self._register_tool(tool_name, description, category, parameters, function)
        
        # ÁîüÊàêLLMÊ®°Âºè
        function_schema = FunctionSchema(
            name=tool_name,
            description=description,
            parameters=self._convert_to_json_schema(parameters)
        )
        
        llm_tool_schema = LLMToolSchema(
            type="function",
            function=asdict(function_schema)
        )
        
        self.tool_schemas[tool_name] = function_schema
        self.llm_tools[tool_name] = llm_tool_schema
        
        logger.info(f"‚úÖ Ê≥®ÂÜåÁªü‰∏ÄÂ∑•ÂÖ∑: {tool_name}")
    
    async def get_tools_for_task(self, task_type: str) -> List[Dict[str, Any]]:
        """Ê†πÊçÆ‰ªªÂä°Á±ªÂûãËé∑ÂèñÊé®ËçêÂ∑•ÂÖ∑"""
        task_tool_mapping = {
            "stock_analysis": ["get_stock_market_data_unified", "get_stock_fundamentals_unified"],
            "technical_analysis": ["get_stock_data", "calculate_technical_indicators"],
            "fundamental_analysis": ["get_financial_data", "perform_fundamental_analysis"],
            "news_analysis": ["get_stock_news", "analyze_sentiment"],
            "market_research": ["get_market_data", "get_stock_news_unified"]
        }
        
        recommended_tools = task_tool_mapping.get(task_type, [])
        tools = []
        
        for tool_name in recommended_tools:
            if tool_name in self.llm_tools:
                tools.append(asdict(self.llm_tools[tool_name]))
        
        return tools
    
    async def health_check(self) -> Dict[str, Any]:
        """ÂÅ•Â∫∑Ê£ÄÊü•"""
        base_health = await super().get_available_tools()
        
        return {
            "status": "healthy" if self.initialized else "unhealthy",
            "total_tools": len(self.tools),
            "llm_tools": len(self.llm_tools),
            "categories": list(set(tool.category for tool in self.tools.values())),
            "unified_tools_available": len(await self.get_unified_tools()),
            "last_check": datetime.now().isoformat()
        }
